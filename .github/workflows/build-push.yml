name: Build and Push to ECR

on:
  workflow_dispatch:

env:
  AWS_REGION: ca-central-1
  ECR_REPOSITORY: workout-tracker

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::182491688958:role/github-action-workout-tracker
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          TRACKER_DATABASE_URL: ${{ secrets.TRACKER_DATABASE_URL }}
          AWS_SNS_TOPIC_ARN: ${{ secrets.AWS_SNS_TOPIC_ARN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          API_ENDPOINT: https://tracker.fluffylab.cloud
          AWS_REGION: ca-central-1
        run: |
          docker build --platform linux/amd64 \
            --build-arg NEXT_PUBLIC_COMMIT_HASH=${IMAGE_TAG} \
            --build-arg PRISMA_CLI_BINARY_TARGETS="debian-openssl-3.0.x" \
            --build-arg PRISMA_CLI_QUERY_ENGINE_TYPE=binary \
            --build-arg PRISMA_CLIENT_ENGINE_TYPE=binary \
            --build-arg GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID} \
            --build-arg GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET} \
            --build-arg NEXTAUTH_URL=tracker.fluffylab.cloud \
            --build-arg NEXTAUTH_SECRET=${NEXTAUTH_SECRET} \
            --build-arg DATABASE_URL=${TRACKER_DATABASE_URL} \
            --build-arg AWS_SNS_TOPIC_ARN=${AWS_SNS_TOPIC_ARN} \
            --build-arg AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} \
            --build-arg AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} \
            --build-arg API_ENDPOINT=${API_ENDPOINT} \
            --build-arg AWS_REGION=${AWS_REGION} \
            -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} .
          
          docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} 